---
title: "Designing Code as a Team"

date: 2024-04-28T10:20:44+02:00

draft: true

description: Event Sourcing is a software pattern for stateful entity management. Instead of storing the current state of an Entity,
  only the state changes are stored. This blog post is about the advantages and disadvantages of the pattern, and how to
  avoid some challenges I faced in long living projects.

tags: [ "Development", "Software Pattern", "Symfony"]
---

{{< lead >}}
Rarely a team has the opportuinity to start a new repository, a new minioproject, a new micro service, a new doce base. These opportunities are in my experience often handled less gracefully as they could be.{{< /lead >}}

## Agile Architecture

One change that came with the agile culture was replacing detailed architecture plans and class structure diagrams "YAGNI" mentality of only developing the current ticket loosing overview over the bigger picture. Both extremes are not practical and will end up in an agile architecture. 

{{<quote>
The phrase “Agile architecture” evokes two concepts:
1. A system or software architecture that is versatile, easy to evolve, and easy to modify, while resilient enough not to degrade after a few changes.
2. An Agile way to define an architecture, using an iterative lifecycle, allowing the architectural design to tactically evolve over time, as the problem and the constraints are better understood.
{{</quote>
[^agileArchitecture]

[^agileArchitecture]: [How to Agilely Architect an Agile Architecture](https://insights.sei.cmu.edu/documents/1395/2014_101_001_493902.pdf)

In every software project there are decisions that need to be done upfront, that will highly influence the architecture of the project - programming language, database decision, authentication, patterns ... 
These decisions should not be solved by the first feature ticket by one developer. But I made the experience that exactly that happens - one developer gets the task of "build the project", locks themselfes in a dark room and emerges after weeks with a barebone of a project every other team member is forced to use from that point on. 

## Defining Architecture and their Requirements
From my idealistic point of view, the architecture decisions should be discussed in the team, after understanding the idea of the product, to design an agile architecture that is flexible enough to be iterated on. 
For this to work, achritecture can not be define the same way as in Waterfall projects in which the architecture was designed and set in stone before the first ticket was started. "The software architecture isn't a set of diagrams, it's not a set of review meetings, it's not a software architecture document, but it is a set of decisions that the team makes about some critical aspects of the system". [^continousArchitecture]

[^continousArchitecture]:[Continuous Architecture with Kurt Bittner and Pierre Pureur](https://www.infoq.com/podcasts/continuous-architecture/)

### Capturating and Documenting Architecture

Viewing Architecture as a set of decisions makes the Architecture Decision Records a very relatable way of documenting architecture. 
Drawing fancy diagrams - something I am very enjoy to do - is a great way to document how a system is working, but often enough the question why it was build this way is the more important question if developers see themselves confronted with the need for change. 

{{

What is a ar 

### Architecture Perspectives for Requirements

While Agile Methodoolgies provide a wide range of tools to define the requirements for products from a user and a business perspective; they often lack the perspective of an architect, future developer, or tester. 
When formulating the User Story, the architectural requirements are often left out, which means in agile they are invisible for time constraints, deadlines, and work recognition. 

Some examples of these requirements, that highly interfer in the the architecture: 
* As Developer I want to be able to understand the architecture of the project easily and want easy ways to add unplanned features
* As an Security Expert, I want to the project to use the company Identity provider to authenticate without static credentials
* As Testing Expert, I want to test the API independently from the Client
* As Database Expert, I want to utalize Query and Command Segregation as I want to handle the future databse performance by using read replica
* As an Interface Expert, I want to communicate with this third party service using a shared Queue
* As a third party user of the service, I want an Open Api definition first aproach to have a priorisation of API Interface
* As an Deployment Expert, I want to be able deploy an independ instance of the project with mocks to test single branches
* As Developer, I want the system to be controllabe and observable on production

In these example the requirement may be unrefined, but they provide a starting point to enrich the process with architectural requirements. [^agileArchitecture]

### How to design Agile Architecture

* *Model the architecture*: The Model should be a tool for communication (not documentation)
* *Consider Alternatives*: Following the LEAN principles, discuss more than one option and consider drawbacks and benefits
* *Mind Cordways Law*: Companies tend to implement systems that reflect their communication structure. If there is no functioning communication structure to the team that builds the service that your system requires, the implementation might reflect that
* *Travel light*: The Architecture will change within the agile process, it can not and should not be defined 


